services:
  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: timeline-backend
    volumes:
      - ./data:/app/data
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    env_file:
      - .env.production
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///data/timeline.db
    restart: unless-stopped
    networks:
      - timeline-network
    # 临时禁用健康检查
    # healthcheck:
    #   test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/api/health')"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.production
    container_name: timeline-frontend
    restart: unless-stopped
    networks:
      - timeline-network
    depends_on:
      - backend
    # 临时禁用健康检查
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Nginx代理服务
  nginx:
    image: nginx:alpine
    container_name: timeline-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./static/uploads:/var/www/static/uploads:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - timeline-network
    # 临时禁用健康检查
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/api/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

networks:
  timeline-network:
    driver: bridge

volumes:
  timeline-data:
    driver: local